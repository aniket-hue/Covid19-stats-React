{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/Country/Country.jsx","App.js","index.js","components/Chart/Chart.module.css","components/Country/Country.module.css","App.module.css","images/image.png"],"names":["module","exports","Cards","props","data","className","classes","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","seperator","Date","toDateString","recovered","deaths","url","fetchData","a","axios","get","realData","confirmed","lastUpdate","fetchDailyData","map","date","reportDate","total","country","updatedData","countries","name","fetchCountry","turl","Chart","state","dailyData","countryData","fetch","promises","Promise","all","countryD","this","setState","barChart","type","labels","datasets","label","findIndex","undefined","backgroundColor","borderWidth","lineChart","borderColor","fill","Component","Country","res","c","key","value","FormControl","NativeSelect","defaultValue","onChange","e","handleCountry","target","App","handleCountryChange","console","log","src","image","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.122585aa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { Card, Typography, CardContent, Grid } from '@material-ui/core';\nimport classes from './Cards.module.css';\nimport cx from 'classnames';\nimport CountUp from 'react-countup';\nconst Cards = (props) => {\n    // const temp = props.data !== null ? console.log(props.data['deaths']['value']) : null;\n    // console.log(props.data);\n    return (\n        props.data !== null ?\n            <div className={classes.container}>\n                <Grid container spacing={3} justify=\"center\">\n\n                    <Grid item component={Card} xs={12} md={3} className = {cx(classes.card, classes.infected)}>\n                        <CardContent>\n                            <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                            <Typography variant=\"h5\"  component=\"h2\">\n                                <CountUp\n                                    start={0}\n                                    end={props.data['confirmed']['value']}\n                                    duration={2.5}\n                                    seperator=\",\"\n                                />\n                            </Typography>\n                            <Typography color=\"textSecondary\">{new Date(props.data['lastUpdate']).toDateString()}</Typography>\n                        </CardContent>\n                    </Grid>\n\n                    <Grid item component={Card} xs={12} md={3} className = {cx(classes.card, classes.recovered)}>\n                        <CardContent>\n                            <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                            <Typography variant=\"h5\"  component=\"h2\">\n                                <CountUp\n                                    start={0}\n                                    end={props.data['recovered']['value']}\n                                    duration={2.5}\n                                    seperator=\",\"\n                                /></Typography>\n                            <Typography color=\"textSecondary\">{new Date(props.data['lastUpdate']).toDateString()}</Typography>\n                        </CardContent>\n                    </Grid>\n\n                    <Grid item component={Card} xs={12} md={3}  className = {cx(classes.card, classes.deaths)}>\n                        <CardContent>\n                            <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                            <Typography variant=\"h5\" component=\"h2\" >\n                                <CountUp\n                                    start={0}\n                                    end={props.data['deaths']['value']}\n                                    duration={2.5}\n                                    seperator=\",\"\n                                /></Typography>\n                            <Typography color=\"textSecondary\">{new Date(props.data['lastUpdate']).toDateString()}</Typography>\n                        </CardContent>\n                    </Grid>\n\n                </Grid>\n\n            </div> : <p>Loading</p>\n    );\n}\n\nexport default Cards;","import axios from 'axios';\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async () => {\n    try {\n        const data = await axios.get(url);\n        const realData = {\n            confirmed: data.data.confirmed,\n            recovered: data.data.recovered,\n            deaths: data.data.deaths,\n            lastUpdate: data.data.lastUpdate\n        }\n        return realData;\n    } catch (error) {\n\n    }\n}\n\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n\n        return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\n    } catch (error) {\n        return error;\n    }\n};\n\n\nexport const country = async () => {\n    try {\n        const data = await axios.get(`${url}/countries`);\n        const updatedData = [...data.data.countries].map(data => data.name);\n        return updatedData;\n    }\n    catch (error) {\n\n    }\n}\n\n\n\n\n\nexport const fetchCountry = async (country) => {\n    try {\n        let turl = url;\n        turl = url + \"/countries/\" + country;\n        const data = await axios.get(turl);\n        const realData = {\n            country : country,\n            confirmed: data.data.confirmed,\n            recovered: data.data.recovered,\n            deaths: data.data.deaths,\n            lastUpdate: data.data.lastUpdate\n        }\n       \n        return (realData);\n        // console.log(realData);\n\n    }\n    catch (error) {\n\n    }\n}\n\n\n// export  fetchData, fetchDailyData;","import React, { Component } from 'react';\nimport { fetchDailyData, fetchCountry, country } from '../../api/index';\nimport Line from 'react-chartjs-2';\nimport Bar from 'react-chartjs-2';\nimport classes from '../Chart/Chart.module.css';\nclass Chart extends Component {\n    state = {\n        dailyData: null,\n        countryData: null\n    }\n\n    async componentDidMount() {\n        const fetch = await fetchDailyData();\n        const countries = await country();\n        const promises = countries.map(async data => await fetchCountry(data))\n\n        const countryD = await Promise.all(promises);\n\n        // console.log(countryD);\n\n\n        this.setState({ dailyData: fetch, countryData: countryD });\n\n\n    }\n\n\n    render() {\n        // console.log(this.props.country);\n        const barChart = (\n            this.props.country !== '' ?\n                <Bar\n                    type='Bar'\n                    data={{\n                        labels: ['Confirmed', 'Infected', 'Deaths'],\n                        datasets: [{\n                            label: 'Covid19 Country Stats',\n                            data: [\n\n                                this.state.countryData\n                                [this.state.countryData.findIndex(data => data !== undefined && data.country === this.props.country)]\n                                ['confirmed']\n                                ['value'],\n\n                                this.state.countryData\n                                [this.state.countryData.findIndex(data => data !== undefined && data.country === this.props.country)]\n                                ['recovered']\n                                ['value'],\n\n                                this.state.countryData\n                                [this.state.countryData.findIndex(data => data !== undefined && data.country === this.props.country)]\n                                ['deaths']\n                                ['value'],\n\n                            ],\n\n                            backgroundColor: [\n                                'rgba(40, 160, 100, 0.2)'\n                            ],\n                            borderWidth: 1\n                        }\n                        ],\n\n                    }} /> : <p>Loading...</p >\n        );\n\n        const lineChart = (\n            this.state.dailyData ?\n                <Line\n                    type='line'\n                    data={{\n                        labels: this.state.dailyData.map(data => data.date),\n                        datasets: [{\n                            data: [...this.state.dailyData.map((data) => data.confirmed)],\n                            label: 'Infected',\n                            borderColor: '#3333ff',\n                            fill: true,\n                        }, {\n                            data: [...this.state.dailyData.map((data) => data.deaths)],\n                            label: 'Deaths',\n                            borderColor: 'red',\n                            backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                            fill: true,\n                        },\n                        ],\n                    }}\n                /> : <p>Loading</p>\n        );\n        // console.log(this.state.dailyData !== null ? lineChart.data    : null);\n        return (\n            <h1 className={classes.container}>{this.props.country === '' ? lineChart : barChart}</h1>\n        );\n    }\n}\n\nexport default Chart;","import React, { Component } from \"react\";\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport classes from './Country.module.css';\nimport { country } from '../../api/index';\nclass Country extends Component {\n    state = {\n        countries: null\n    }\n\n    async componentDidMount() {\n        const res = await country();\n        // console.log(res);\n        this.setState({ countries: res });\n    }\n    \n    render() {\n        let c = 0;\n\n        const country = this.state.countries !== null ?\n            this.state.countries.map(data => {\n                // console.log(data);\n                return <option key={c++} value={data}>{data}</option>\n            }) : null;\n\n\n        return (\n            <FormControl className= {classes.FormControl}>\n                <NativeSelect defaultValue=\"Global\" onChange={e => this.props.handleCountry(e.target.value)}>\n                    <option value=\"\">Global</option>\n                    {country}\n                </NativeSelect>\n            </FormControl>\n        );\n    }\n}\n\nexport default Country;","import React, { Component } from \"react\";\nimport Cards from './components/Cards/Cards';\nimport Chart from './components/Chart/Chart';\nimport Country from './components/Country/Country';\nimport classes from './App.module.css';\nimport { fetchData, fetchCountry } from './api/index';\nimport image from './images/image.png';\nclass App extends Component {\n    state = {\n        data: null,\n        country: '',\n    }\n    async componentDidMount() {\n        const data = await fetchData();\n        this.setState({ data: data });\n        // console.log(data);\n        // console.log(this.state.data)\n    }\n\n    handleCountryChange = async (Country) => {\n        // console.log(Country);\n        if (Country !== \"\") {\n            const data = await fetchCountry(Country);\n            this.setState({ data: data, country: Country });\n            console.log(data);\n        }\n        else {\n            const data = await fetchData();\n            this.setState({ data: data, country :'' });\n        }\n    }\n\n    render() {\n        return (\n            <div className={classes.container}>\n                <img src={image} />\n                <Cards data={this.state.data} />\n                <Country handleCountry={this.handleCountryChange} />\n                <Chart country = {this.state.country} />\n            </div>\n        );\n    }\n};\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Country_formControl__3h-YE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","module.exports = __webpack_public_path__ + \"static/media/image.51087c64.png\";"],"sourceRoot":""}